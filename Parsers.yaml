parsers: # array
  - reg: "slbable$"
    # - reg: ^.*$
    # - reg: ^.*$ 匹配所有订阅，或  - url: https://example.com/profile.yaml 指定订阅
    # 下面是删除服务商自带的策略组和规则
    code: |
      module.exports.parse = (raw, { yaml }) => {
        const rawObj = yaml.parse(raw)
        const groups = []
        const rules = []
        return yaml.stringify({ ...rawObj, 'proxy-groups': groups, rules })
      }
    yaml:
      # 添加通用节点避免正则无法匹配筛选导致出错
      append-proxies:
        - name: fake.example.com
          type: http
          server: fake.example.com
          port: 20000
      # 添加预处理策略组
      prepend-proxy-groups: # 数组合并至原配置proxy-groups数组后
        - name: 🚀 节点选择
          type: select
          proxies:
            - ♻️ 负载均衡
            - ♻️ PROXY
            - ♻️ 香港节点
            - ♻️ 新加坡节点
            - ♻️ 台湾节点
            - ♻️ 日本节点
            - ♻️ 韩国节点
            - ♻️ 美国节点
            - ♻️ 解锁流媒体
            - ♻️ 其他节点

        - name: ♻️ PROXY
          type: url-test
          url: http://www.gstatic.com/generate_204
          interval: 1800 # 30分钟
          tolerance: 500 # 小于300ms 不切换
          proxies:
            - ♻️ 香港节点
            - ♻️ 新加坡节点
            - ♻️ 台湾节点
            - ♻️ 日本节点
            - ♻️ 韩国节点
            - ♻️ 美国节点

        - name: ♻️ 香港节点
          type: url-test
          url: http://www.gstatic.com/generate_204
          interval: 1800

        - name: ♻️ 新加坡节点
          type: url-test
          url: http://www.gstatic.com/generate_204
          interval: 1800

        - name: ♻️ 台湾节点
          type: url-test
          url: http://www.google.com/generate_204
          interval: 1800
          proxies:
            - fake.example.com

        - name: ♻️ 日本节点
          type: url-test
          url: http://www.google.com/generate_204
          interval: 1800
          proxies:
            - fake.example.com

        - name: ♻️ 韩国节点
          type: url-test
          url: http://www.google.com/generate_204
          interval: 1800
          proxies:
            - fake.example.com

        - name: ♻️ 美国节点
          type: url-test
          url: http://www.google.com/generate_204
          interval: 1800
          proxies:
            - fake.example.com

        - name: ♻️ 解锁流媒体
          type: select

        - name: ♻️ 其他节点
          type: select

        # 自动选择[散列/轮询]进行负载均衡
        - name: ♻️ 负载均衡
          type: url-test
          url: http://www.gstatic.com/generate_204
          interval: 1800
          tolerance: 500
          proxies:
            - ⚖️ 负载均衡-散列
            - ⚖️ 负载均衡-轮询

        - name: ⚖️ 负载均衡-散列
          type: load-balance
          url: "http://www.google.com/generate_204"
          interval: 600 # 10分钟
          strategy: consistent-hashing

        - name: ⚖️ 负载均衡-轮询
          type: load-balance
          url: "http://www.google.com/generate_204"
          interval: 600
          strategy: round-robin

      commands:
        # 负载均衡策略组
        - proxy-groups.⚖️ 负载均衡-散列.proxies=[]groupNames|香港|新加坡
        - proxy-groups.♻️ PROXY.proxies.0+⚖️ 负载均衡-散列
        - proxy-groups.⚖️ 负载均衡-轮询.proxies=[]groupNames|香港|新加坡
        - proxy-groups.♻️ PROXY.proxies.0+⚖️ 负载均衡-轮询

        # 筛选对应节点，不包括高倍节点，高倍率节点归类在其他节点
        - proxy-groups.♻️ 香港节点.proxies.1+[]proxyNames|^(?!.*[倍xX])(?=.*(?:[hH][kK]|香港)).*$
        - proxy-groups.♻️ 新加坡节点.proxies.1+[]proxyNames|^(?!.*[倍xX])(?=.*(?:[sS][pP]|新加坡)).*$
        - proxy-groups.♻️ 台湾节点.proxies.1+[]proxyNames|^(?!.*[倍xX])(?=.*(?:[tT][wW]|台湾)).*$
        - proxy-groups.♻️ 日本节点.proxies.1+[]proxyNames|^(?!.*[倍xX])(?=.*(?:[jJ][pP]|日本)).*$
        - proxy-groups.♻️ 韩国节点.proxies.1+[]proxyNames|^(?!.*[倍xX])(?=.*(?:[kK][rR]|韩国)).*$
        - proxy-groups.♻️ 美国节点.proxies.1+[]proxyNames|^(?!.*[倍xX])(?=.*(?:[uU][sS]|美国)).*$
        # - proxy-groups.♻️ 其他节点.proxies=[]proxyNames|^[^香日台新韩美]*$
        - proxy-groups.♻️ 其他节点.proxies.1+[]proxyNames|^(?:(?!.*[香日台新韩美])|.*(?:[xX]|倍|chatGPT|GPT)).*$
        # - proxy-groups.♻️ 解锁流媒体.proxies=[]proxyNames|奈飞|解锁|nf|netflix/i
        - proxy-groups.♻️ 解锁流媒体.proxies.1+[]proxyNames|^(?!.*[倍xX])(?=.*(?:奈飞|解锁|nf|netflix|Netflix|流媒体)).*$

        # 流媒体节点添加直连与香港新加坡节点，避免机场节点无法匹配上面的正则筛选而导致配置出错
        - proxy-groups.♻️ 解锁流媒体.proxies.0+DIRECT
        - proxy-groups.♻️ 解锁流媒体.proxies.1+[]groupNames|香港|新加坡

      # 添加预处理规则
      prepend-rules: # 数组合并至原配置rules数组前，规则由上往下遍历，如上面规则已经命中，则不再往下处理
        - DOMAIN-KEYWORD,spotify,♻️ 香港节点
        - DOMAIN-KEYWORD,google,♻️ 香港节点
        - DOMAIN-KEYWORD,youtube,♻️ 香港节点
        - DOMAIN-KEYWORD,discord,♻️ 香港节点
        - DOMAIN-KEYWORD,twitch,♻️ 香港节点
        - DOMAIN-KEYWORD,telegram,♻️ 香港节点
        - DOMAIN-SUFFIX,spotify.com,♻️ 香港节点
        - DOMAIN-SUFFIX,google.com,♻️ 香港节点
        - DOMAIN-SUFFIX,youtube.com,♻️ 香港节点
        - DOMAIN-SUFFIX,twitter.com,♻️ 香港节点
        - DOMAIN-KEYWORD,twitter,♻️ 香港节点
        - DOMAIN-SUFFIX,instagram.com,♻️ 韩国节点
        - DOMAIN-KEYWORD,instagram,♻️ 韩国节点
        - DOMAIN-SUFFIX,facebook.com,♻️ 韩国节点
        - DOMAIN-KEYWORD,facebook,♻️ 韩国节点
        # - DOMAIN-SUFFIX,images.blz-contentstack.com,美国节点
        # - DOMAIN-SUFFIX,content-ui.battle.net,♻️ 美国节点
        # - DOMAIN-SUFFIX,telemetry-in.battle.net,♻️ 美国节点
        - RULE-SET,netflix,♻️ 解锁流媒体
        - RULE-SET,applications,DIRECT
        - DOMAIN,clash.razord.top,DIRECT
        - DOMAIN,yacd.haishan.me,DIRECT
        - RULE-SET,private,DIRECT
        - RULE-SET,reject,REJECT
        - RULE-SET,icloud,DIRECT
        - RULE-SET,apple,DIRECT
        - RULE-SET,google,DIRECT
        - RULE-SET,proxy,♻️ PROXY
        - RULE-SET,direct,DIRECT
        - RULE-SET,lancidr,DIRECT
        - RULE-SET,cncidr,DIRECT
        - RULE-SET,telegramcidr,♻️ PROXY
        - GEOIP,LAN,DIRECT
        - GEOIP,CN,DIRECT
        - MATCH,♻️ PROXY #白名单模式 「没有命中规则的网络流量，统统使用代理」
        # - MATCH,DIRECT #黑名单模式 「只有命中规则的网络流量，才使用代理」

      # 添加规则集
      mix-rule-providers:
        # https://github.com/Loyalsoldier/clash-rules
        direct: # 直连域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/direct.txt"
          path: ./ruleset/direct.yaml
          interval: 86400 # 一天

        proxy: # 代理域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt"
          path: ./ruleset/proxy.yaml
          interval: 86400

        reject: # 广告域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt"
          path: ./ruleset/reject.yaml
          interval: 86400

        private: # 私有网络专用域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/private.txt"
          path: ./ruleset/private.yaml
          interval: 86400

        apple: # Apple 在中国大陆可直连的域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/apple.txt"
          path: ./ruleset/apple.yaml
          interval: 86400

        icloud: # iCloud 域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/icloud.txt"
          path: ./ruleset/icloud.yaml
          interval: 86400

        google: # Google 在中国大陆可直连的域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/google.txt"
          path: ./ruleset/google.yaml
          interval: 86400

        gfw: # GFWList 域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/gfw.txt"
          path: ./ruleset/gfw.yaml
          interval: 86400

        tld-not-cn: # 非中国大陆使用的顶级域名列表
          type: http
          behavior: domain
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/tld-not-cn.txt"
          path: ./ruleset/tld-not-cn.yaml
          interval: 86400

        telegramcidr: # Telegram 使用的 IP 地址列表
          type: http
          behavior: ipcidr
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/telegramcidr.txt"
          path: ./ruleset/telegramcidr.yaml
          interval: 86400

        lancidr: # 局域网 IP 及保留 IP 地址列表
          type: http
          behavior: ipcidr
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt"
          path: ./ruleset/lancidr.yaml
          interval: 86400

        cncidr: # 中国大陆 IP 地址列表
          type: http
          behavior: ipcidr
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt"
          path: ./ruleset/cncidr.yaml
          interval: 86400

        applications: # 需要直连的常见软件列表
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/applications.txt"
          path: ./ruleset/applications.yaml
          interval: 86400

        # https://github.com/blackmatrix7/ios_rule_script/tree/master/rule
        netflix: # 奈飞的分流规则
          type: http
          behavior: classical
          url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/release/rule/Clash/Netflix/Netflix.yaml"
          path: ./ruleset/netflix.yaml
          interval: 86400

        youtube: # YouTube 在中国大陆可直连的域名列表
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/YouTube/YouTube.yaml"
          path: ./ruleset/youtube.yaml
          interval: 86400

        advertiselite: # 去广告精简版
          type: http
          behavior: classical
          url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/AdvertisingLite/AdvertisingLite_Classical.yaml"
          path: ./ruleset/advertiselite.yaml
          interval: 86400
